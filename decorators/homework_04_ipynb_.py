# -*- coding: utf-8 -*-
"""Копия блокнота "homework_04.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bEiQHhZaU-nS2IqbQ-Cr89VibOAI8moC

# Домашнее задание: декораторы

## Импорт библиотек, установка констант
"""

import requests
import time
import re

from random import randint

BOOK_PATH = 'https://www.gutenberg.org/files/2638/2638-0.txt'

"""## Задание 1"""

def benchmark(func):
    """
    Декоратор, выводящий время, которое заняло выполнение декорируемой функции
    """

    def wrapper(*args, **kwargs):
        start = time.perf_counter()
        result = func(*args, **kwargs)
        end = time.perf_counter()
        print(f'Время выполнения функции {func.__name__} {end - start:.6f} секунд')

    return wrapper

"""## Задание 2"""

def logging(func):
    """
    Декоратор, который выводит параметры с которыми была вызвана функция
    """

    def wrapper(*args, **kwargs):
        print(f'Функция {func.__name__} вызвана с параметрами: {args} и {kwargs}')

    return wrapper

"""## Задание 3"""

def counter(func):
    """
    Декоратор, считающий и выводящий количество вызовов декорируемой функции
    """

    def wrapper(*args, **kwargs):
        if (func):
            wrapper.count += 1
            print(f"Функция была вызвана: {wrapper.count} раз")

    wrapper.count = 0
    return wrapper

"""## Задание 4"""

def memo(func):
  """
  Декоратор, запоминающий результаты исполнения функции func, чьи аргументы args должны быть хешируемыми
  """
  cache = {}

  def fmemo(*args):
    cache[args] = func(*args)

  fmemo.cache = cache
  return fmemo

"""## Тестирование"""

@counter
@logging
@benchmark
def word_count(word, url=BOOK_PATH):
    """
    Функция для посчета указанного слова на html-странице
    """

    # отправляем запрос в библиотеку Gutenberg и забираем текст
    raw = requests.get(url).text

    # заменяем в тексте все небуквенные символы на пробелы
    processed_book = re.sub('[\\W]+', ' ', raw).lower()

    # считаем
    cnt = len(re.findall(word.lower(), processed_book))

    return f"Cлово {word} встречается {cnt} раз"

print(word_count('whole'))
print(word_count('some'))

def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

# измеряем время выполнения
@benchmark
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

fib(randint(1, 10))

@memo
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

# измеряем время выполнения
@memo
@benchmark
def fib(n):
    if n < 2:
        return n
    return fib(n-2) + fib(n-1)

fib(randint(1, 10))